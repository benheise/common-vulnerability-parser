#!/usr/bin/env python

# Copyright (C) 2017 errbufferoverfl
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

import argparse
import csv
from time import sleep

def longest(x):
    if isinstance(x,list):
        yield len(x)
        for y in x:
            yield from longest(y)


def printProgressBar(iteration, total, prefix='', suffix='', decimals=1, length=100, fill='â–ˆ'):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end='\r')
    # Print New Line on Complete
    if iteration == total:
        print()

cve = set()
data = []
cve_lists = []

parser = argparse.ArgumentParser(description='Takes an OpenVAS file and returns hosts affected by a CVE.')
parser.add_argument('-p', '--path',
                    dest='path',
                    help='path to the OpenVAS CVS file',
                    required=True)
parser.add_argument('-f', '--file',
                    dest='file',
                    help='name to call the file, defaults to output.csv',
                    required=False)

args = parser.parse_args()

with open(args.path, 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')

    for row in reader:
        if 'NOCVE' in row[11]:
            continue

        if ',' in row[11]:
            multi_cve = row[11].split(', ')
            for entry in multi_cve:
                cve.add(entry)
        else:
            cve.add(row[11])

    csv_length = reader.line_num

    csvfile.seek(0)

    minimum = 0
    responses_length = len(cve)
    print('Sorting CVEs...')
    printProgressBar(minimum, responses_length, prefix='Progress:', suffix='Complete', length=50)
    for uniq_cve in cve:
        data.append(uniq_cve)
        for row in reader:
            if row[2] == '':
                full_address = row[0]
            else:
                full_address = row[0] + ':' + row[2]

            if ',' in row[11]:
                multi_cve = row[11].split(', ')
                for entry in multi_cve:
                    if uniq_cve == entry:
                        data.append(full_address)
            else:
                if uniq_cve == row[11]:
                    data.append(full_address)

        cve_lists.append(data)
        data = []
        csvfile.seek(0)

        # Stuff for the progress bar
        sleep(0.001)
        minimum += 1
        printProgressBar(minimum, responses_length, prefix='Progress:', suffix='Complete', length=50)

longest_list = len(max(cve_lists,key=len))

rows = []
row = []

min = 0

responses_length = len(cve) * longest_list

print('Generating CSV...')

printProgressBar(min, responses_length, prefix='Progress:', suffix='Complete', length=50)
for count in range(0, (len(cve) * longest_list)):
    for entry in cve_lists:
        try:
            row.append(entry[0])
            entry.pop(0)
        except IndexError:
            row.append('')

    rows.append(row)
    row = []

    sleep(0.001)
    min += 1
    printProgressBar(min, responses_length, prefix='Progress:', suffix='Complete', length=50)

if args.file is None:
    args.file = 'report.csv'

if not str(args.file).endswith('.csv'):
    args.file = args.file + '.csv'

print('Writing CSV file out to {}...'.format(args.file))

with open(args.file , 'w') as resultFile:
    wr = csv.writer(resultFile, dialect='excel')
    wr.writerows(rows)

